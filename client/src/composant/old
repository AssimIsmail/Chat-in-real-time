import React, { useEffect, useState } from 'react';
import axios from 'axios';
import io from 'socket.io-client';

const Conversation = ({ conversationId, userId }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [error, setError] = useState(null);
  const [socket, setSocket] = useState(null);

  useEffect(() => {
    const fetchMessages = async () => {
      try {
        const response = await axios.get(`http://localhost:3000/api/conversations/${conversationId}/messages`);
        const messagesWithUsers = await Promise.all(response.data.map(async (msg) => {
          try {
            const userResponse = await axios.get(`http://localhost:3000/api/users/${msg.sender}`);
            return {
              ...msg,
              senderName: userResponse.data.displayName,
            };
          } catch (userError) {
            console.error(`Error fetching user ${msg.sender}:`, userError);
            return {
              ...msg,
              senderName: 'Unknown',
            };
          }
        }));
        setMessages(messagesWithUsers);
        setError(null);
      } catch (error) {
        console.error('Error fetching messages:', error);
        if (error.response && error.response.status === 404) {
          setError('Conversation not found');
        } else {
          setError(error.message || 'Failed to fetch messages');
        }
      }
    };

    if (conversationId) {
      fetchMessages();
    }
  }, [conversationId]);

  useEffect(() => {
    const newSocket = io('http://localhost:3000');
    setSocket(newSocket);

    if (conversationId) {
      newSocket.emit('joinConversation', conversationId);
    }

    newSocket.on('message', async (newMessage) => {
      try {
        const userResponse = await axios.get(`http://localhost:3000/api/users/${newMessage.sender}`);
        const updatedMessage = {
          ...newMessage,
          senderName: userResponse.data.displayName,
        };
        setMessages((prevMessages) => [...prevMessages, updatedMessage]);
      } catch (error) {
        console.error(`Error fetching user ${newMessage.sender}:`, error);
        const updatedMessage = {
          ...newMessage,
          senderName: 'Unknown',
        };
        setMessages((prevMessages) => [...prevMessages, updatedMessage]);
      }
    });

    return () => {
      newSocket.disconnect();
    };
  }, [conversationId, userId]);

  const handleSendMessage = (event) => {
    event.preventDefault();
    if (newMessage.trim() && conversationId && userId) {
      const messageData = {
        sender: userId,
        text: newMessage,
        conversationId,
      };
      socket.emit('message', messageData);
      setNewMessage('');
    } else {
      setError('Conversation ID and user ID are required');
    }
  };

  return (
    <div>
      <h2>Messages de la conversation {conversationId}</h2>
      {error && <p>{error}</p>}
      <ul>
        {messages.map((msg) => (
          <li key={msg._id}>
            <strong>{msg.senderName}: </strong>
            {msg.text}
          </li>
        ))}
      </ul>
      <form onSubmit={handleSendMessage}>
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          placeholder="Type your message..."
        />
        <button type="submit">Send</button>
      </form>
    </div>
  );
};

export default Conversation;
